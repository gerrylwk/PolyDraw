name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

env:
  IMAGE_NAME: polydraw
  CONTAINER_NAME: polydraw-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
    
    - name: Stop existing container
      run: |
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
      continue-on-error: true
    
    - name: Deploy new container
      run: |
        docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          -p 3000:80 \
          ${{ env.IMAGE_NAME }}:latest
    
    - name: Wait for deployment
      run: |
        echo "Waiting for application to start..."
        sleep 15
        echo "âœ… Deployment completed!"
        echo "ðŸš€ Application should be running at: http://localhost:3000"
    
    - name: Tag successful deployment
      if: success()
      run: |
        # Tag current image as previous for future rollbacks
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:previous
    
    - name: Cleanup old images
      if: always()
      run: |
        # Remove old images to save space (keep latest, previous, and current commit)
        docker image prune -f
        docker images ${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}" | \
          grep -v -E "(latest|previous|${{ github.sha }})" | \
          xargs -r docker rmi 2>/dev/null || true
